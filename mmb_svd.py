# -*- coding: utf-8 -*-
"""mmb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15b7PZp5ET6GoGk1svw_PJ_YyLLKK8Sth
"""

import numpy as np
from solve_linear_program import solve_linear_program
from numpy.linalg import svd as SVD

def sample_unit_sphere(n):
    vec = np.random.randn(3, n)
    vec = vec / np.linalg.norm(vec, axis=0)
    return vec.T

def compute_mmb(ocs_Phi, obs_resp_Phi, obs_resp_Psi, illum_Phi=None, illum_Psi=None, res=100):

    cs_map_Phi = (obs_resp_Phi.T * illum_Phi).T
    cs_map_Psi = (obs_resp_Psi.T * illum_Psi).T
    U, _, _ = SVD(cs_map_Psi, full_matrices=False)
    mmb_extrema = []
    for direction in sample_unit_sphere(res):
        direction_mod = direction
        Psi_F = U @ direction_mod
        refl_min, refl_max  = solve_linear_program(of_cfs=Psi_F, constr=cs_map_Phi.T, constr_req=ocs_Phi, bounds=(0,1))
        cs_min_Psi = cs_map_Psi.T @ refl_min
        cs_max_Psi = cs_map_Psi.T @ refl_max
        mmb_extrema = mmb_extrema + [cs_min_Psi, cs_max_Psi]
    scale_factor = np.max(obs_resp_Psi.T @ illum_Psi)

    return [p/scale_factor for p in mmb_extrema]
